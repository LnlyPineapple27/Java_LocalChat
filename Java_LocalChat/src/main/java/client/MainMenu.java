/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import java.net.Socket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.concurrent.TimeUnit;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import sound.notification_sound;
/**
 *
 * @author Phan Tan Dat
 */
public class MainMenu extends javax.swing.JFrame {
    int MAXSIZE = 100;
    String username = "unknown", host_ip = "unknown";
    int port = -1;
    private ClientCore core = null;
    private LoginUI parent;
    private boolean has_date = true;
    private boolean has_time = true;
   // private boolean sending_file = false;
    String default_download_folder = "D:\\Local_chat\\Download";
    SendFileUI child = null;
    DateTimeFormatter _day;
    DateTimeFormatter _time;
    
    private boolean has_sound = true, is_active = false;
    private notification_sound _player = new notification_sound();;
    String folder = "";
    /**
     * Creates new form MainMenu
     */
    public String getName(){
        return this.username;
    }
    public String getHost(){
        return this.host_ip;
    }
    public int getPort(){
        return this.port;
    }
    /*
    void close_sending_file(){
        this.sending_file = false;
    }
    void open_sending_file(){
        this.sending_file = true;
    }*/
    public MainMenu(LoginUI ui) {
        this.parent = ui;
        _day = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
        _time = DateTimeFormatter.ofPattern("HH:mm:ss");
        initComponents();
    }
    public MainMenu() {
        this.parent = null;
        _day = DateTimeFormatter.ofPattern("dd/MM/yyyy");  
        _time = DateTimeFormatter.ofPattern("HH:mm:ss");
        initComponents();
    }
    
    void printLog(String type, String msg){
        String t = "", d = "";
        LocalDateTime now = LocalDateTime.now();
        if (has_date)
            d = _day.format(now);
            if (!has_time)
                d += "-";
            else
                d += " ";
        
        if (has_time)
            t = _time.format(now) + "-";
        
        if (has_sound) _player.play_sound();
        this.EventLog.append(d + t + "[" + type + "]: " + msg + "\r\n");
    }
    public void startConnection(String name, String host, int port) throws Exception{
        this.username = name;
        this.port = port;
        this.host_ip = host;
        this.is_active = true;
        try{
            this.core = new ClientCore(this, this.username, this.host_ip, this.port);
        }
        catch (Exception e){
            throw e;
        }
        this.setVisible(true);

    }
    public void closeConnection(boolean is_quit){
        if (this.is_active){
            this.printLog("DISCONNECTING","please wait");
            try{
                
                //TimeUnit.SECONDS.sleep(1);
                this.core.stop_now(is_quit);
            }
            catch (Exception e){
                this.printLog("CONNECTION CLOSE EXCEPTION", e.getMessage());
                System.out.println(e.getMessage());
            }
            if (is_quit)
                JOptionPane.showMessageDialog(null, "Main window will automatically close", "DISCONNECTED", JOptionPane.INFORMATION_MESSAGE);

            this.setVisible(false);
            this.is_active = false;
            if (this.parent != null)
                this.parent.setVisible(true);
        }
    }
    boolean getConnectionStatus(){
        if (this.core == null)
            return false;
        else
            return this.core.getStatus();
    }
    void updateOnlineList(Set<String> user_list){
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) userTable.getModel();
        model.setRowCount(0);//Clear table
        if (user_list != null ){
            if(!user_list.isEmpty()){
                for(String i : user_list){
                    Vector row = new Vector();
                    row.add(i);
                    model.addRow(row);
                }
            }
        }
        userTable.revalidate();//Show changes
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EventLog = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        ClearLog = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        HasSoundCheckBox = new javax.swing.JCheckBoxMenuItem();
        HasTimeCheckBox = new javax.swing.JCheckBoxMenuItem();
        HasDateCheckBox = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout(1, 1));

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Online Users"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        userTable.setColumnSelectionAllowed(true);
        userTable.getTableHeader().setReorderingAllowed(false);
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(userTable);
        userTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.LINE_START);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.PAGE_AXIS));

        jLabel2.setLabelFor(EventLog);
        jLabel2.setText("Events Log");
        jPanel4.add(jLabel2);

        EventLog.setEditable(false);
        EventLog.setColumns(20);
        EventLog.setRows(5);
        jScrollPane1.setViewportView(EventLog);
        EventLog.getAccessibleContext().setAccessibleName("");

        jPanel4.add(jScrollPane1);

        jPanel1.add(jPanel4, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Options");

        jMenuItem1.setText("Message to all");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        ClearLog.setText("Clear Event Log");
        ClearLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ClearLogMousePressed(evt);
            }
        });
        jMenu1.add(ClearLog);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Settings");

        HasSoundCheckBox.setSelected(true);
        HasSoundCheckBox.setText("Notification Sound");
        HasSoundCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HasSoundCheckBoxMousePressed(evt);
            }
        });
        HasSoundCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasSoundCheckBoxActionPerformed(evt);
            }
        });
        jMenu2.add(HasSoundCheckBox);

        HasTimeCheckBox.setSelected(true);
        HasTimeCheckBox.setText("Show timestamp in log");
        HasTimeCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HasTimeCheckBoxMousePressed(evt);
            }
        });
        HasTimeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasTimeCheckBoxActionPerformed(evt);
            }
        });
        jMenu2.add(HasTimeCheckBox);

        HasDateCheckBox.setSelected(true);
        HasDateCheckBox.setText("Show Datestamp in log");
        HasDateCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HasDateCheckBoxMousePressed(evt);
            }
        });
        HasDateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasDateCheckBoxActionPerformed(evt);
            }
        });
        jMenu2.add(HasDateCheckBox);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HasSoundCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasSoundCheckBoxActionPerformed
        // TODO add your handling code here:
        if(this.HasSoundCheckBox.isSelected())
            this.has_sound = true;
        else 
            this.has_sound = false;
        if (this.has_sound) _player.play_sound();
    }//GEN-LAST:event_HasSoundCheckBoxActionPerformed

    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        // TODO add your handling code here:
        //if (has_sound) _player.play_sound();
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = source.columnAtPoint( evt.getPoint() );
        String s = source.getModel().getValueAt(row, column)+"";
        String[] options = {"Send Message", "Send File", "Cancel"};
        int choice = JOptionPane.showOptionDialog(this, "Choose a task to do with user: " + s , "Options", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null, options, options[2]);
        switch(choice){
            case 0:
                String input = JOptionPane.showInputDialog(this,"Enter your message to " + s, "User Input", JOptionPane.INFORMATION_MESSAGE);
                if (input == null)
                    return;
                else{
                    if (input.isBlank()){
                        this.printLog("Could not send message", "Empty message");
                        return;
                    }
                    try{
                        this.core.sendMessage(s, input);
                    }
                    catch (Exception e){
                        this.printLog("Could not send message!", e.getMessage());
                    }
                    
                }
                break;
            case 1:
                //if(this.sending_file == false){
                    //this.child = 
                    new SendFileUI(this, s);
                    /*if (this.child.send_to(s)){
                        this.open_sending_file();
                    }
                    else JOptionPane.showMessageDialog(this, "A file is being sent right now!\n Please wait", "SYSTEM BUSY", JOptionPane.ERROR_MESSAGE);       
                    */
                //}
                //else JOptionPane.showMessageDialog(this, "A file is being sent right now!\n Please wait", "SYSTEM BUSY", JOptionPane.ERROR_MESSAGE);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_userTableMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void HasSoundCheckBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HasSoundCheckBoxMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_HasSoundCheckBoxMousePressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.closeConnection(true);     
    }//GEN-LAST:event_formWindowClosing

    private void ClearLogMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClearLogMousePressed
        // TODO add your handling code here:
        this.EventLog.selectAll();
        this.EventLog.replaceSelection("");
        if (this.has_sound) _player.play_sound();
    }//GEN-LAST:event_ClearLogMousePressed

    private void HasTimeCheckBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HasTimeCheckBoxMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_HasTimeCheckBoxMousePressed

    private void HasDateCheckBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HasDateCheckBoxMousePressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_HasDateCheckBoxMousePressed

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(this,"Enter your message to ALL", "User Input", JOptionPane.INFORMATION_MESSAGE);
        if (input == null)
            return;
        else{
            //send msg via dos
            if (input.isBlank()){
                this.printLog("Could not send message", "Empty message");
                return;
            }
            try{
                this.core.sendMessageAll(input);
            }
            catch (Exception e){
                this.printLog("Could not send message!", e.getMessage());
            }

        }
    }//GEN-LAST:event_jMenuItem1MousePressed

    private void HasTimeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasTimeCheckBoxActionPerformed
        // TODO add your handling code here:
        if (HasTimeCheckBox.isSelected())
            has_time = true;
        else
            has_time = false;
        if (has_sound) _player.play_sound();
    }//GEN-LAST:event_HasTimeCheckBoxActionPerformed

    private void HasDateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasDateCheckBoxActionPerformed
        // TODO add your handling code here:
        if (HasDateCheckBox.isSelected())
            has_date = true;
        else
            has_date = false;
        if (has_sound) _player.play_sound();
    }//GEN-LAST:event_HasDateCheckBoxActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ClearLog;
    private javax.swing.JTextArea EventLog;
    private javax.swing.JCheckBoxMenuItem HasDateCheckBox;
    private javax.swing.JCheckBoxMenuItem HasSoundCheckBox;
    private javax.swing.JCheckBoxMenuItem HasTimeCheckBox;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
